import { type NextPage } from "next";
import { Dispatch, SetStateAction, useState } from "react";
import Head from "next/head";
import { useSession } from "next-auth/react";

import { Header } from "~/components/Header";
import { NoteEditor } from "../components/NoteEditor";
import { NoteCard } from "../components/NoteCard";

import { api, type RouterOutputs } from "~/utils/api";
import { Alert } from "~/components/Alert";
import { ALERT_TYPE } from "~/types/alert-types";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Note taker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [showAlert, setShowAlert] = useState<Boolean>(false);
  const [alertType, setAlertType] = useState<keyof typeof ALERT_TYPE>("INFO");
  const [alertMessage, setAlertMessage] = useState<string>("");

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
      setAlert(true, "SUCCESS", "Successfully created a topic üïØÔ∏è");
    },
  });

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const setAlert = (
    showAlert: boolean,
    alertType: keyof typeof ALERT_TYPE,
    alertMessage: string,
) => {
    setShowAlert(showAlert);
    setAlertType(alertType);
    setAlertMessage(alertMessage);
  }

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
      setAlert(true, "SUCCESS", "Successfully created a note üìù");
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
      setAlert(true, "WARNING", "Successfully deleted a note ‚ùå");
    },
  });

  if (!sessionData?.user) {
    return (
      <div className="flex-1 pl-5 text-3xl font-bold w-full my-4">
        <p className="text-center">Please Sign in</p>
      </div>
    )
  }

  return (
    <div className="px-5 mt-5 flex flex-col lg:flex-row w-full h-full">
      <div className="lg:w-1/4 w-full px-2">
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li key={topic.id}>
              <a
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {topic.title}
              </a>
            </li>
          ))}
        </ul>
        <div className="divider before:bg-black before:bg-opacity-20 after:bg-black after:bg-opacity-20" />
        <div className="tooltip before:mb-1 after:mb-1 before:bg-slate-300 before:text-black w-full" data-tip="Press Enter to save">
          <input
            type="text"
            placeholder="New Topic"
            className="input-bordered input input-sm w-full"
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                createTopic.mutate({
                  title: e.currentTarget.value,
                });
                e.currentTarget.value = "";
              }
            }}
          />
        </div>
      </div>
      <div className="divider divider-vertical lg:divider-horizontal lg:before:bg-black lg:before:bg-opacity-10 lg:after:bg-black lg:after:bg-opacity-10" />
      <div className="lg:w-3/4 w-full px-4 flex-col h-full">
        <div className="overflow-y-auto max-h-[18rem] h-1/3 border-2 rounded-lg p-4">
          {notes?.map((note) => (
            <div key={note.id}>
              <NoteCard
                note={note}
                onDelete={() => void deleteNote.mutate({ id: note.id })}
              />
            </div>
          ))}
        </div>

        <div className="h-2/3">
          <NoteEditor
            onSave={({ title, content }) => {
              void createNote.mutate({
                title,
                content,
                topicId: selectedTopic?.id ?? "",
              });
            }}
          />
        </div>
      </div>
      {showAlert && (
        <div className="absolute right-8 bottom-8">
          <Alert alertType={alertType} alertMessage={alertMessage} setShowAlert={setShowAlert} />
        </div>
      )}
    </div>
  );
};
